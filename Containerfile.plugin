####################################################################################################
# UI build stage
####################################################################################################
FROM registry.access.redhat.com/ubi9/nodejs-18:1-118.1724037695 AS argo-rollouts-ui

WORKDIR /src

# Copy the UI source files into the container
COPY argo-rollouts/ui .

# Install Yarn
RUN npm install --global yarn

# Set the user to the default non-root user provided by UBI
USER root

# Install dependencies
RUN yarn install --network-timeout 300000

# Set the Argon version argument
ARG ARGO_VERSION=latest
ENV ARGO_VERSION=$ARGO_VERSION

# Build the UI application
RUN NODE_ENV='production' yarn build

####################################################################################################
# Rollout Controller Build stage which performs the actual build of argo-rollouts binaries
####################################################################################################
FROM brew.registry.redhat.io/rh-osbs/openshift-golang-builder:rhel_8_golang_1.22 AS argo-rollouts-build

# Set the working directory for the build
WORKDIR /go/src/github.com/argoproj/argo-rollouts

# Set the user to the default non-root user provided by UBI
USER root

# Copy only go.mod and go.sum files to optimize build caching
COPY argo-rollouts/go.mod argo-rollouts/go.sum ./
RUN go mod download

# Copy UI files for plugin build
COPY --from=argo-rollouts-ui /src/dist/app ./ui/dist/app

# Copy the rest of the argo-rollouts source files
COPY argo-rollouts .

# Run go mod vendor
RUN go mod vendor

# Ensure any pre-existing .git file or directory is removed before copying
RUN rm -rf /go/src/github.com/argoproj/argo-rollouts/.git

# Copy the .git directory if needed for the build (e.g., for git metadata)
COPY .git /go/src/github.com/argoproj/argo-rollouts/.git

# Create required UI build markers to avoid rebuilds without Yarn installed
RUN touch ui/dist/node_modules.marker && \
    mkdir -p ui/dist/app && \
    touch ui/dist/app/index.html && \
    find ui/dist

# Build the plugins for multiple platforms
RUN make plugin-linux plugin-darwin plugin-windows

####################################################################################################
# Package the binaries into the image using UBI (Universal Base Image)
####################################################################################################
FROM registry.access.redhat.com/ubi8/ubi

# this directory is checked by ecosystem-cert-preflight-checks task in Konflux
COPY LICENSE /licenses/

# Set the user to the default non-root user provided by UBI
USER 999

WORKDIR /

COPY --from=argo-rollouts-build /go/src/github.com/argoproj/argo-rollouts/dist/kubectl-argo-rollouts-darwin-amd64 /
COPY --from=argo-rollouts-build /go/src/github.com/argoproj/argo-rollouts/dist/kubectl-argo-rollouts-darwin-arm64 /
COPY --from=argo-rollouts-build /go/src/github.com/argoproj/argo-rollouts/dist/kubectl-argo-rollouts-linux-amd64 /
COPY --from=argo-rollouts-build /go/src/github.com/argoproj/argo-rollouts/dist/kubectl-argo-rollouts-linux-arm64 /
COPY --from=argo-rollouts-build /go/src/github.com/argoproj/argo-rollouts/dist/kubectl-argo-rollouts-windows-amd64 /

# Add required labels
LABEL name="Argo Rollouts Kubectl plugin binaries" \
      summary="Argo Rollouts Kubectl plugin binaries" \
      description="Argo Rollouts Kubectl plugin binaries for various platforms, including Darwin and Linux."

# Define the entrypoint
# ENTRYPOINT ["<entrypoint-executable>"]

